frontend_code = """
'I\'ll help you create a basic e-commerce site using React, with features like product listing, cart functionality, and a checkout process.\n\n<boltArtifact id="ecommerce-site" title="E-commerce Site with React">\n<boltAction type="file" filePath="package.json">\n{\n  "name": "ecommerce-site",\n  "private": true,\n  "version": "0.0.0",\n  "type": "module",\n  "scripts": {\n    "dev": "vite",\n    "build": "vite build",\n    "preview": "vite preview"\n  },\n  "dependencies": {\n    "react": "^18.2.0",\n    "react-dom": "^18.2.0",\n    "react-router-dom": "^6.14.2",\n    "react-icons": "^4.10.1",\n    "@reduxjs/toolkit": "^1.9.5",\n    "react-redux": "^8.1.1",\n    "styled-components": "^6.0.4"\n  },\n  "devDependencies": {\n    "@types/react": "^18.2.15",\n    "@types/react-dom": "^18.2.7",\n    "@vitejs/plugin-react": "^4.0.3",\n    "vite": "^4.4.6"\n  }\n}\n</boltAction>\n\n<boltAction type="file" filePath="src/main.jsx">\nimport React from \'react\'\nimport ReactDOM from \'react-dom/client\'\nimport { Provider } from \'react-redux\'\nimport { BrowserRouter } from \'react-router-dom\'\nimport App from \'./App\'\nimport { store } from \'./store\'\nimport \'./index.css\'\n\nReactDOM.createRoot(document.getElementById(\'root\')).render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>\n)\n</boltAction>\n\n<boltAction type="file" filePath="src/App.jsx">\nimport { Routes, Route } from \'react-router-dom\'\nimport Navbar from \'./components/Navbar\'\nimport Home from \'./pages/Home\'\nimport Products from \'./pages/Products\'\nimport ProductDetail from \'./pages/ProductDetail\'\nimport Cart from \'./pages/Cart\'\nimport Checkout from \'./pages/Checkout\'\n\nfunction App() {\n  return (\n    <>\n      <Navbar />\n      <Routes>\n        <Route path="/" element={<Home />} />\n        <Route path="/products" element={<Products />} />\n        <Route path="/product/:id" element={<ProductDetail />} />\n        <Route path="/cart" element={<Cart />} />\n        <Route path="/checkout" element={<Checkout />} />\n      </Routes>\n    </>\n  )\n}\n\nexport default App\n</boltAction>\n\n<boltAction type="file" filePath="src/store/index.js">\nimport { configureStore } from \'@reduxjs/toolkit\'\nimport cartReducer from \'./cartSlice\'\n\nexport const store = configureStore({\n  reducer: {\n    cart: cartReducer\n  }\n})\n</boltAction>\n\n<boltAction type="file" filePath="src/store/cartSlice.js">\nimport { createSlice } from \'@reduxjs/toolkit\'\n\nconst cartSlice = createSlice({\n  name: \'cart\',\n  initialState: {\n    items: [],\n    total: 0\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const existingItem = state.items.find(item => item.id === action.payload.id)\n      if (existingItem) {\n        existingItem.quantity++\n      } else {\n        state.items.push({ ...action.payload, quantity: 1 })\n      }\n      state.total = state.items.reduce((total, item) => total + (item.price * item.quantity), 0)\n    },\n    removeFromCart: (state, action) => {\n      state.items = state.items.filter(item => item.id !== action.payload)\n      state.total = state.items.reduce((total, item) => total + (item.price * item.quantity), 0)\n    },\n    updateQuantity: (state, action) => {\n      const { id, quantity } = action.payload\n      const item = state.items.find(item => item.id === id)\n      if (item) {\n        item.quantity = quantity\n      }\n      state.total = state.items.reduce((total, item) => total + (item.price * item.quantity), 0)\n    }\n  }\n})\n\nexport const { addToCart, removeFromCart, updateQuantity } = cartSlice.actions\nexport default cartSlice.reducer\n</boltAction>\n\n<boltAction type="file" filePath="src/components/Navbar.jsx">\nimport { Link } from \'react-router-dom\'\nimport { useSelector } from \'react-redux\'\nimport { FaShoppingCart } from \'react-icons/fa\'\nimport styled from \'styled-components\'\n\nconst Nav = styled.nav`\n  background-color: #2874f0;\n  padding: 1rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nconst Logo = styled(Link)`\n  color: white;\n  text-decoration: none;\n  font-size: 1.5rem;\n  font-weight: bold;\n`\n\nconst NavLinks = styled.div`\n  display: flex;\n  gap: 2rem;\n`\n\nconst CartIcon = styled(Link)`\n  color: white;\n  text-decoration: none;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`\n\nfunction Navbar() {\n  const cartItems = useSelector(state => state.cart.items)\n  const itemCount = cartItems.reduce((total, item) => total + item.quantity, 0)\n\n  return (\n    <Nav>\n      <Logo to="/">FlipMart</Logo>\n      <NavLinks>\n        <Link to="/products" style={{ color: \'white\', textDecoration: \'none\' }}>Products</Link>\n        <CartIcon to="/cart">\n          <FaShoppingCart />\n          <span>{itemCount}</span>\n        </CartIcon>\n      </NavLinks>\n    </Nav>\n  )\n}\n\nexport default Navbar\n</boltAction>\n\n<boltAction type="file" filePath="src/pages/Products.jsx">\nimport { useState } from \'react\'\nimport { Link } from \'react-router-dom\'\nimport { useDispatch } from \'react-redux\'\nimport { addToCart } from \'../store/cartSlice\'\nimport styled from \'styled-components\'\n\nconst ProductGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 2rem;\n  padding: 2rem;\n`\n\nconst ProductCard = styled.div`\n  border: 1px solid #ddd;\n  padding: 1rem;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`\n\nconst Button = styled.button`\n  background-color: #2874f0;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #1c5dc9;\n  }\n`\n\nconst products = [\n  { id: 1, name: \'Smartphone\', price: 499.99, image: \'https://via.placeholder.com/200\' },\n  { id: 2, name: \'Laptop\', price: 999.99, image: \'https://via.placeholder.com/200\' },\n  { id: 3, name: \'Headphones\', price: 99.99, image: \'https://via.placeholder.com/200\' },\n  { id: 4, name: \'Smartwatch\', price: 199.99, image: \'https://via.placeholder.com/200\' },\n]\n\nfunction Products() {\n  const dispatch = useDispatch()\n\n  const handleAddToCart = (product) => {\n    dispatch(addToCart(product))\n  }\n\n  return (\n    <ProductGrid>\n      {products.map(product => (\n        <ProductCard key={product.id}>\n          <img src={product.image} alt={product.name} style={{ width: \'100%\', height: \'auto\' }} />\n          <h3>{product.name}</h3>\n          <p>${product.price}</p>\n          <Link to={`/product/${product.id}`} style={{ textDecoration: \'none\' }}>\n            <Button>View Details</Button>\n          </Link>\n          <Button onClick={() => handleAddToCart(product)}>Add to Cart</Button>\n        </ProductCard>\n      ))}\n    </ProductGrid>\n  )\n}\n\nexport default Products\n</boltAction>\n\n<boltAction type="file" filePath="src/pages/Cart.jsx">\nimport { useSelector, useDispatch } from \'react-redux\'\nimport { Link } from \'react-router-dom\'\nimport { removeFromCart, updateQuantity } from \'../store/cartSlice\'\nimport styled from \'styled-components\'\n\nconst CartContainer = styled.div`\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n`\n\nconst CartItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 2rem;\n  padding: 1rem;\n  border-bottom: 1px solid #ddd;\n`\n\nconst Button = styled.button`\n  background-color: #2874f0;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #1c5dc9;\n  }\n`\n\nfunction Cart() {\n  const { items, total } = useSelector(state => state.cart)\n  const dispatch = useDispatch()\n\n  const handleQuantityChange = (id, quantity) => {\n    if (quantity < 1) {\n      dispatch(removeFromCart(id))\n    } else {\n      dispatch(updateQuantity({ id, quantity }))\n    }\n  }\n\n  return (\n    <CartContainer>\n      <h2>Shopping Cart</h2>\n      {items.length === 0 ? (\n        <p>Your cart is empty</p>\n      ) : (\n        <>\n          {items.map(item => (\n            <CartItem key={item.id}>\n              <img src={item.image} alt={item.name} style={{ width: \'100px\' }} />\n              <div>\n                <h3>{item.name}</h3>\n                <p>${item.price}</p>\n              </div>\n              <div>\n                <button onClick={() => handleQuantityChange(item.id, item.quantity - 1)}>-</button>\n                <span>{item.quantity}</span>\n                <button onClick={() => handleQuantityChange(item.id, item.quantity + 1)}>+</button>\n              </div>\n              <button onClick={() => dispatch(removeFromCart(item.id))}>Remove</button>\n            </CartItem>\n          ))}\n          <div style={{ marginTop: \'2rem\' }}>\n            <h3>Total: ${total.toFixed(2)}</h3>\n            <Link to="/checkout">\n              <Button>Proceed to Checkout</Button>\n            </Link>\n          </div>\n        </>\n      )}\n    </CartContainer>\n  )\n}\n\nexport default Cart\n</boltAction>\n\n<boltAction type="file" filePath="src/index.css">\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen,\n    Ubuntu, Cantarell, \'Open Sans\', \'Helvetica Neue\', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nbutton {\n  cursor: pointer;\n}\n</boltAction>\n\n<boltAction type="file" filePath="index.html">\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>FlipMart - Your Online Shopping Destination</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/src/main.jsx"></script>\n  </body>\n</html>\n</boltAction>\n\n<boltAction type="shell">\nnpm install && npm run dev\n</boltAction>\n</boltArtifact>\n\nThe e-commerce site includes:\n- Product listing with grid layout\n- Shopping cart functionality\n- Redux state management\n- Responsive design\n- Navigation using React Router\n- Styled components for styling\n\nYou can add more features like:\n- User authentication\n- Product search and filtering\n- Product categories\n- Order history\n- Payment integration\n- Product reviews\n\nLet me know if you want to implement any of these additional features!'

"""
